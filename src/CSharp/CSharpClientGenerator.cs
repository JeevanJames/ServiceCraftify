using Humanizer;

using Jeevan.ServiceCraftify.Transformers;
using Jeevan.ServiceCraftify.TypeProcessing;

using Microsoft.OpenApi.Models;

using NCodeBuilder;
using NCodeBuilder.CSharp;

namespace Jeevan.ServiceCraftify.CSharp;

public sealed partial class CSharpClientGenerator : Generator<CSharpClientGeneratorSettings>
{
    protected override DocumentProcessor[] GetDocumentProcessors() => [
        new TransformDocumentProcessor(OpenApiDoc, Settings),
        new TypeDocumentProcessor(OpenApiDoc),
    ];

    protected override IEnumerable<GeneratedCode> GenerateCode()
    {
        CodeBuilder builder = new CodeBuilder(LanguageProvider.CSharp())
            .Comment("--------------------------------------------------")
            .Comment("<auto-generated>")
            .Comment("    Generated using ServiceCraftify")
            .Comment("    https://github.com/JeevanJames/ServiceCraftify")
            .Comment("</auto-generated>")
            .Comment("--------------------------------------------------")
            ._____
            ._("#nullable enable")
            ._____
            .UsingAlias("System", "global::System")
            .Using("System.Linq")
            ._____
            .NamespaceFileScoped(Settings.Namespace)
            ._____
            .Generate(GenerateClients)
            ._____
            .Generate(GenerateModels);

        yield return new GeneratedCode("GeneratedClient.cs", builder.ToString());
    }
     
    private void GenerateClients(CodeBuilder builder)
    {
        builder
            .Generate(GenerateConsolidatedClient, GetGenerateConsolidatedClient())
            .Generate(GenerateActualClients);
    }

    private void GenerateConsolidatedClient(CodeBuilder builder)
    {
        builder
            .Interface($"I{Settings.ConsolidatedClient.Name}").Public.Partial._
                ._("System.Net.Http.HttpClient Client { get; }")
                .Repeat(GetServiceNames(), (cb, state) => cb
                    ._($$"""I{{state.Item}} {{TransformConsolidatedClientProperty(state.Item).Pascalize()}} { get; }"""))
            .EndInterface()
            ._____
            .Block($"public partial class {Settings.ConsolidatedClient.Name} : I{Settings.ConsolidatedClient.Name}")
                .Repeat(GetServiceNames(), (cb, state) => cb
                    ._($"private I{state.Item}? _{TransformConsolidatedClientProperty(state.Item).Camelize()};"))
                ._____
                .Block($"public {Settings.ConsolidatedClient.Name}(System.Net.Http.HttpClient client)")
                    ._("Client = client ??  throw new System.ArgumentNullException(nameof(client));")
                    ._("if (client.BaseAddress is null)")
                        .__("""throw new System.ArgumentException("HTTP client base address is null.");""")
                .EndBlock()
                ._____
                ._("public System.Net.Http.HttpClient Client { get; }")
                ._____
                .Repeat(GetServiceNames(), (cb, state) => cb
                    ._($"public I{state.Item} {TransformConsolidatedClientProperty(state.Item).Pascalize()} => _{TransformConsolidatedClientProperty(state.Item).Camelize()} ?? new {state.Item}(Client);"))
            .EndBlock();
    }

    private void GenerateActualClients(CodeBuilder builder)
    {
        builder
            .Repeat(GetServiceNames(), (cb, state) => cb
                ._____
                .Block($"public partial interface I{state.Item}")
                .Generate(GenerateClientInterfaceMethods, state.Item)
                .EndBlock()
                ._____
                ._($"public partial class {state.Item} : I{state.Item};"));
    }

    private void GenerateClientInterfaceMethods(CodeBuilder builder, string serviceName)
    {
        IEnumerable<OpenApiOperation> operations = OpenApiDoc.Paths.Values
            .SelectMany(path => path.Operations.Values)
            .Where(operation => operation.GetName() == serviceName);
        builder
            .Repeat(operations, (cb, state) => cb
                ._($"/// <summary>{state.Item.Description}</summary>")
                ._($"System.Threading.Tasks.Task {state.Item.GetName(state.Item.OperationId)}Async();"));
    }

    private void GenerateModels(CodeBuilder builder) => builder
        .Repeat(GetEnumModels(), (cb, state) => GenerateEnumModels(cb, state.Item.Schema, state.Item.SchemaType, state.IsLast))
        .Repeat(GetObjectModels(), (cb, state) => GenerateObjectModels(cb, state.Item.Schema, state.Item.SchemaType, state.IsLast));

    private static void GenerateEnumModels(CodeBuilder builder, OpenApiSchema schema, EnumSchemaType schemaType, bool isLast) => builder
        .Generate(!string.IsNullOrWhiteSpace(schema.Description),
            cb => cb.DocComments(schema.Description))
        .Block($"public enum {schema.GetName()}")
            .Repeat(schemaType.Details.Members, (cb, state) => cb
                .Generate(state.Item.Description is not null,
                    cb2 => cb2.DocComments(state.Item.Description!))
                ._($"{state.Item.Name} = {state.Item.Value},")
                ._(!state.IsLast))
        .EndBlock()
        ._(!isLast);

#pragma warning disable S1172 // Unused method parameters should be removed
    private void GenerateObjectModels(CodeBuilder builder, OpenApiSchema schema, ObjectSchemaType schemaType, bool isLast) => builder
        .Inline($"public partial class {schema.GetName()}")
            ._(" : IExtensionData", Settings.AddExtensionDataForModels)
            .Done()
        .Block()
        .Generate(cb => GenerateProperties(cb, schema))
        .EndBlock()
        ._(!isLast);
#pragma warning restore S1172 // Unused method parameters should be removed

    private static void GenerateProperties(CodeBuilder builder, OpenApiSchema schema) => builder
        .Repeat(schema.Properties, (cb, state) => cb
            ._($"""[System.Text.Json.Serialization.JsonPropertyName("{state.Item.Key}")]""")
            .AutoProperty(state.Item.Value.GetName(state.Item.Key), state.Item.Value.Type)
                .InitializeWith("default!")
                .Done()
            ._(string.Empty, !state.IsLast));
}
