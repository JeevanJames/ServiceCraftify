using Humanizer;

using Microsoft.OpenApi.Models;

using NCodeBuilder;
using NCodeBuilder.CSharp;

namespace Jeevan.ServiceCraftify.CSharp;

#pragma warning disable S2325 // Methods and properties that don't access instance data should be static
public sealed class CSharpClientGenerator : Generator<CSharpClientGeneratorSettings>
{
    private bool? _generateConsolidatedClient;
    private string[]? _serviceNames;

    private bool SeparateNamespaces =>
        !string.IsNullOrWhiteSpace(Settings.ModelNamespace) &&
            !string.Equals(Settings.ClientNamespace, Settings.ModelNamespace, StringComparison.Ordinal);

    private bool GetGenerateConsolidatedClient()
    {
        if (_generateConsolidatedClient.HasValue)
            return _generateConsolidatedClient.Value;

        string[] serviceNames = GetServiceNames();

        bool generateConsolidatedClient = Settings.ConsolidatedClientGeneration switch
        {
            ConsolidatedClientGeneration.IfMultipleClients => serviceNames.Length > 1,
            ConsolidatedClientGeneration.Never => false,
            ConsolidatedClientGeneration.Always => true,
            _ => throw new NotSupportedException($"Unrecognized {nameof(ConsolidatedClientGeneration)} value {Settings.ConsolidatedClientGeneration}"),
        };

        _generateConsolidatedClient = generateConsolidatedClient;
        return generateConsolidatedClient;
    }

    private string[] GetServiceNames()
    {
        if (_serviceNames is not null)
            return _serviceNames;

        _serviceNames = OpenApiDoc.Paths.Values
            .Select(path => path.Operations)
            .SelectMany(operationKvp => operationKvp.Values)
            .Select(operation => operation.GetName())
            .Distinct(StringComparer.Ordinal)
            .Order()
            .ToArray();

        return _serviceNames;
    }

    protected override IEnumerable<DocumentProcessor> GetDocumentProcessors()
    {
        yield return new TransformDocumentProcessor(OpenApiDoc, Settings);
    }

    protected override IEnumerable<GeneratedCode> GenerateCode()
    {
        CodeBuilder builder = new CodeBuilder(LanguageProvider.CSharp())
            .Comment("--------------------------------------------------")
            .Comment("<auto-generated>")
            .Comment("    Generated using ServiceCraftify")
            .Comment("    https://github.com/JeevanJames/ServiceCraftify")
            .Comment("</auto-generated>")
            .Comment("--------------------------------------------------")
            ._____
            ._("#nullable enable")
            ._____
            .UsingAlias("System", "global::System")
            .Using("System.Linq")
            ._____
            .Generate(cb => cb
                .NamespaceFileScoped(Settings.ClientNamespace)
                ._____
                .Generate(GenerateClients)
                ._____
                .Generate(GenerateModels), !SeparateNamespaces)
            .Generate(cb => cb
                .Namespace(Settings.ClientNamespace)
                .Generate(GenerateClients)
                .EndNamespace()
                ._____
                .Namespace(Settings.ModelNamespace ?? Settings.ClientNamespace)
                .Generate(GenerateModels)
                .EndNamespace(), SeparateNamespaces);

        yield return new GeneratedCode("GeneratedClient.cs", builder.ToString());
    }
     
    private void GenerateClients(CodeBuilder builder)
    {
        builder
            .Generate(GenerateConsolidatedClient, GetGenerateConsolidatedClient())
            .Generate(GenerateActualClients);
    }

    private void GenerateConsolidatedClient(CodeBuilder builder)
    {
        builder
            .Interface($"I{Settings.ConsolidatedClientName}").Public.Partial._
                ._("System.Net.Http.HttpClient Client { get; }")
                .Repeat(GetServiceNames(), (cb, state) => cb
                    ._($$"""I{{state.Item}} {{state.Item}} { get; }"""))
            .EndInterface()
            ._____
            .Block($"public partial class {Settings.ConsolidatedClientName} : I{Settings.ConsolidatedClientName}")
                .Repeat(GetServiceNames(), (cb, state) => cb
                    ._($"private I{state.Item}? _{state.Item.Camelize()};"))
                ._____
                .Block($"public {Settings.ConsolidatedClientName}(System.Net.Http.HttpClient client)")
                    ._("Client = client ??  throw new System.ArgumentNullException(nameof(client));")
                    ._("if (client.BaseAddress is null)")
                        .Indent._("""throw new System.ArgumentException("HTTP client base address is null.");""").Unindent
                .EndBlock()
                ._____
                ._("public System.Net.Http.HttpClient Client { get; }")
                ._____
                .Repeat(GetServiceNames(), (cb, state) => cb
                    ._($"public I{state.Item} {state.Item.Pascalize()} => _{state.Item.Camelize()} ?? new {state.Item}(Client);"))
            .EndBlock();
    }

    private void GenerateActualClients(CodeBuilder builder)
    {
        builder
            .Repeat(GetServiceNames(), (cb, state) => cb
                ._____
                ._($"public partial interface I{state.Item};")
                ._($"public partial class {state.Item} : I{state.Item};"));
    }

    private void GenerateModels(CodeBuilder builder) => builder
        .Repeat(OpenApiDoc.Components.Schemas, (cb, state) => cb
            .Inline($"public partial class {state.Item.GetName()}")
                ._(" : IExtensionData", Settings.AddExtensionDataForModels)
                .Done()
            .Block()
            .Generate(cb => GenerateProperties(cb, state.Item.Value))
            .EndBlock()
            ._(string.Empty, !state.IsLast));

    private void GenerateProperties(CodeBuilder builder, OpenApiSchema schema)
    {
        builder
            .Repeat(schema.Properties, (cb, state) => cb
                ._($"""[System.Text.Json.Serialization.JsonPropertyName("{state.Item.Key}")]""")
                .AutoProperty(state.Item.GetName(state.Item.Key), state.Item.Value.Type)
                    .InitializeWith("default!")
                    .Done()
                ._(string.Empty, !state.IsLast));
    }
}
